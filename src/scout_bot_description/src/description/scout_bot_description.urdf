<?xml version="1.0"?>

<robot name="scout_bot" xmlns:xacro="http://ros.org/wiki/xacro">

  <!-- Define robot constants -->
  <xacro:property name="base_length" value="0.42"/>
  <xacro:property name="base_width" value="0.31"/>
  <xacro:property name="base_height" value="0.18"/>

  <xacro:property name="wheel_radius" value="0.10"/>
  <xacro:property name="wheel_width" value="0.04"/>
  <xacro:property name="wheel_ygap" value="0.025"/>
  <xacro:property name="wheel_zoff" value="0.05"/>
  <xacro:property name="wheel_xoff" value="0.12"/>

  <xacro:property name="caster_xoff" value="0.34"/>

  <!-- 카메라 높이 (로봇 본체 중앙 높이) -->
  <xacro:property name="cam_offset" value="0.08" />
  <xacro:property name="cam_height" value="0.001" />

  <xacro:property name="M_PI" value="3.14159"/>
  <xacro:property name="base_x_size" value="0.925" />
  <xacro:property name="base_y_size" value="0.38" />
  <xacro:property name="base_z_size" value="0.21" />  

  <!-- Define inertial property macros  -->
  <xacro:macro name="box_inertia" params="m w h d">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 ${pi/2}"/>
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0"
               iyy="${(m/12) * (w*w + d*d)}" iyz="0.0"
               izz="${(m/12) * (w*w + h*h)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="cylinder_inertia" params="m r h">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy="0" ixz="0"
               iyy="${(m/12) * (3*r*r + h*h)}" iyz="0"
               izz="${(m/2) * (r*r)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="sphere_inertia" params="m r">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${(2/5) * m * (r*r)}" ixy="0.0" ixz="0.0"
               iyy="${(2/5) * m * (r*r)}" iyz="0.0"
               izz="${(2/5) * m * (r*r)}"/>
    </inertial>
  </xacro:macro>

  <!-- Apply box inertia to base footprint -->
  <xacro:box_inertia m="15" w="${base_width}" d="${base_length}" h="${base_height}"/>
  
  <joint name="base_link_joint" type="fixed">
    <parent link="base_link"/>
    <child link="base_footprint"/>
    <origin xyz="0.0 0.0 ${-(wheel_radius+wheel_zoff)}" rpy="0 0 0"/>
  </joint>

  <!-- Robot Footprint -->
  <link name="base_footprint"/>
  
  <!-- Robot Base -->
  <link name="base_link">
    <visual>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
      <material name="Cyan">
        <color rgba="0 1.0 1.0 1.0"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
    </collision>
  </link>

  <!-- Wheels -->
  <xacro:macro name="wheel" params="prefix x_reflect y_reflect">
    <link name="${prefix}_link">
      <visual>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
        <material name="Gray">
          <color rgba="0.5 0.5 0.5 1.0"/>
        </material>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
      </collision>
      <xacro:cylinder_inertia m="0.5" r="${wheel_radius}" h="${wheel_width}"/>
    </link>

    <joint name="${prefix}_joint" type="continuous">
      <parent link="base_link"/>
      <child link="${prefix}_link"/>
      <origin xyz="${x_reflect * wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}" rpy="0 0 0"/>
      <axis xyz="0 1 0"/>
    </joint>
  </xacro:macro>

  <xacro:wheel prefix="drivewhl_l" x_reflect="-1" y_reflect="1" />
  <xacro:wheel prefix="drivewhl_r" x_reflect="-1" y_reflect="-1" />

  <!-- Caster Wheel -->
  <link name="front_caster">
    <visual>
      <geometry>
        <sphere radius="${(wheel_radius+wheel_zoff-(base_height/2))}"/>
      </geometry>
      <material name="Cyan">
        <color rgba="0 1.0 1.0 1.0"/>
      </material>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <sphere radius="${(wheel_radius+wheel_zoff-(base_height/2))}"/>
      </geometry>
    </collision>
    <xacro:sphere_inertia m="0.5" r="${(wheel_radius+wheel_zoff-(base_height/2))}"/>
  </link>

  <joint name="caster_joint" type="fixed">
    <parent link="base_link"/>
    <child link="front_caster"/>
    <origin xyz="${caster_xoff} 0.0 ${-(base_height/2)}" rpy="0 0 0"/>
  </joint>

  <!-- IMU Sensor -->
  <link name="imu_link">
    <visual>
      <geometry>
        <box size="0.1 0.1 0.1"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <box size="0.1 0.1 0.1"/>
      </geometry>
    </collision>
    <xacro:box_inertia m="0.1" w="0.1" d="0.1" h="0.1"/>
  </link>

  <joint name="imu_joint" type="fixed">
    <parent link="base_link"/>
    <child link="imu_link"/>
    <origin xyz="0 0 0.01" rpy="0 0 0"/>
  </joint>

  <!-- Gazebo Plugin for IMU Sensor -->
  <gazebo reference="imu_link">
    <gravity>true</gravity>
    <sensor name="imu_sensor" type="imu">
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
        <topicName>imu_raw</topicName>
        <update_rate>0</update_rate>
        <bodyName>imu_link</bodyName>
        <updateRateHZ>200.0</updateRateHZ>
        <gaussianNoise>0.0</gaussianNoise>
        <xyzOffset>0 0 0</xyzOffset>
        <rpyOffset>0 0 0</rpyOffset>
        <frameName>base_link</frameName>
        <initialOrientationAsReference>false</initialOrientationAsReference>
      </plugin>
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <imu>
        <angular_velocity>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </z>
        </angular_velocity>
        <linear_acceleration>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </z>
        </linear_acceleration>
      </imu>
    </sensor>
  </gazebo>

  <!-- 카메라 센서들 -->
  <!-- Front Camera -->

  <joint name="front_camera_joint" type="fixed">
    <parent link="base_link"/>
    <child link="front_camera_link"/>
    <origin xyz="0.5125 0 ${cam_height}" rpy="0 0 0"/>
  </joint>

  <link name="front_camera_link">
    <inertial>
      <mass value="0.5"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="0.005" ixy="0" ixz="0" iyy="0.005" iyz="0" izz="0.005"/>
    </inertial>
    <visual>
      <geometry>
        <box size="0.05 0.05 0.05"/>
      </geometry>
      <material name="">
        <color rgba="0.1 0.8 0.1 1"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <box size="0.05 0.05 0.05"/>
      </geometry>
    </collision>
  </link>

  <gazebo reference="front_camera_link">
    <sensor name="front_camera_sensor" type="camera">
      <pose>0 0 0 0 0 0</pose>
      <update_rate>30</update_rate>
      <camera>
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>640</width>
          <height>480</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.1</near>
          <far>100</far>
        </clip>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="gazebo_ros_camera_controller_front">
        <ros>
          <namespace>/front_camera</namespace>
        </ros>
        <cameraName>front_camera_sensor</cameraName>
        <frameName>front_camera_link</frameName>
      </plugin>
    </sensor>
  </gazebo>

  <!-- Back Camera -->

  <joint name="back_camera_joint" type="fixed">
    <parent link="base_link"/>
    <child link="back_camera_link"/>
    <origin xyz="-0.5125 0 ${cam_height}" rpy="0 0 ${M_PI}"/>
  </joint>

  <link name="back_camera_link">
    <inertial>
      <mass value="0.5"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="0.005" ixy="0" ixz="0" iyy="0.005" iyz="0" izz="0.005"/>
    </inertial>
    <visual>
      <geometry>
        <box size="0.05 0.05 0.05"/>
      </geometry>
      <material name="">
        <color rgba="0.1 0.8 0.1 1"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <box size="0.05 0.05 0.05"/>
      </geometry>
    </collision>
  </link>

  <gazebo reference="back_camera_link">
    <sensor name="back_camera_sensor" type="camera">
      <pose>0 0 0 0 0 0</pose>
      <update_rate>30</update_rate>
      <camera>
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>640</width>
          <height>480</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.1</near>
          <far>100</far>
        </clip>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="gazebo_ros_camera_controller_back">
        <ros>
          <namespace>/back_camera</namespace>
        </ros>
        <cameraName>back_camera_sensor</cameraName>
        <frameName>back_camera_link</frameName>
      </plugin>
    </sensor>
  </gazebo>

  <!-- Left Camera -->

  <joint name="left_camera_joint" type="fixed">
    <parent link="base_link"/>
    <child link="left_camera_link"/>
    <origin xyz="0 ${base_y_size/2 + cam_offset} ${cam_height}" rpy="0 0 ${M_PI/2}"/>
  </joint>

  <link name="left_camera_link">
    <inertial>
      <mass value="0.5"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="0.005" ixy="0" ixz="0" iyy="0.005" iyz="0" izz="0.005"/>
    </inertial>
    <visual>
      <geometry>
        <box size="0.05 0.05 0.05"/>
      </geometry>
      <material name="">
        <color rgba="0.1 0.8 0.1 1"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <box size="0.05 0.05 0.05"/>
      </geometry>
    </collision>
  </link>

  <gazebo reference="left_camera_link">
    <sensor name="left_camera_sensor" type="camera">
      <pose>0 0 0 0 0 0</pose>
      <update_rate>30</update_rate>
      <camera>
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>640</width>
          <height>480</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.1</near>
          <far>100</far>
        </clip>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="gazebo_ros_camera_controller_left">
        <ros>
          <namespace>/left_camera</namespace>
        </ros>
        <cameraName>left_camera_sensor</cameraName>
        <frameName>left_camera_link</frameName>
      </plugin>
    </sensor>
  </gazebo>

  <!-- Right Camera -->

  <joint name="right_camera_joint" type="fixed">
    <parent link="base_link"/>
    <child link="right_camera_link"/>
    <origin xyz="0 ${-base_y_size/2 - cam_offset} ${cam_height}" rpy="0 0 ${-M_PI/2}"/>
  </joint>

  <link name="right_camera_link">
    <inertial>
      <mass value="0.5"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="0.005" ixy="0" ixz="0" iyy="0.005" iyz="0" izz="0.005"/>
    </inertial>
    <visual>
      <geometry>
        <box size="0.05 0.05 0.05"/>
      </geometry>
      <material name="">
        <color rgba="0.1 0.8 0.1 1"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <box size="0.05 0.05 0.05"/>
      </geometry>
    </collision>
  </link>

  <gazebo reference="right_camera_link">
    <sensor name="right_camera_sensor" type="camera">
      <pose>0 0 0 0 0 0</pose>
      <update_rate>30</update_rate>
      <camera>
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>640</width>
          <height>480</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.1</near>
          <far>100</far>
        </clip>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="gazebo_ros_camera_controller_right">
        <ros>
          <namespace>/right_camera</namespace>
        </ros>
        <cameraName>right_camera_sensor</cameraName>
        <frameName>right_camera_link</frameName>
      </plugin>
    </sensor>
  </gazebo>

  <!-- GNSS/IMU 센서 추가 - 센서의 최상위 링크(dummy_base_link)를 로봇의 base_link에 부착 -->

  <joint name="dummy_base_link_joint" type="fixed">
    <parent link="base_link"/>
    <child link="dummy_base_link"/>
    <origin xyz="0 0 0" rpy="0 0 0"/>
  </joint>    

  <!-- 더미 루트 링크 (관성 없음) -->
  <link name="dummy_base_link">
    <visual>
      <geometry>
        <box size="0.001 0.001 0.001"/>
      </geometry>
      <material name="dummy_material">
         <color rgba="0 0 0 0"/>
      </material>
    </visual>
  </link> 

  <!-- 더미 루트와 GNSS 본체를 연결하는 고정 조인트 -->
  <joint name="gnss_joint" type="fixed">
    <parent link="dummy_base_link"/>
    <child link="gnss_link"/>
    <origin xyz="0 0 0" rpy="0 0 0"/>
    <gazebo>
      <disable_ros_transmission>true</disable_ros_transmission>
    </gazebo>
  </joint> 

  <!-- GNSS 본체 링크 -->
  <link name="gnss_link">
    <inertial>
      <mass value="1.0"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="0.01" ixy="0" ixz="0" iyy="0.01" iyz="0" izz="0.01"/>
    </inertial>
    <visual>
      <geometry>
         <box size="0.2 0.1 0.05"/>
      </geometry>
      <material name="gnss_link_material">
         <color rgba="0.1 0.1 0.8 1"/>
      </material>
    </visual>
    <collision>
      <geometry>
         <box size="0.2 0.1 0.05"/>
      </geometry>
    </collision>
  </link> 
  
  <!-- Gazebo 플러그인 왼쪽 GNSS 센서 (GPS/속도 데이터) -->

  <gazebo reference="gnss_link">
    <sensor type="gps" name="gnss_sensor">
      <always_on>true</always_on>
      <update_rate>5</update_rate>
      <topic>/gnss/gazebo_ros_gps/out</topic>
      <plugin name="gazebo_ros_gps_sensor" filename="libgazebo_ros_gps_sensor.so">
         <ros>
            <namespace>/gnss/gazebo_ros_gps</namespace>
            <parameter name="reference_lat" value="37.4275"/>
            <parameter name="reference_long" value="-122.1697"/>
            <parameter name="reference_alt" value="30.0"/>
         </ros>
         <frame_id>gnss_link</frame_id>
      </plugin>
    </sensor>
  </gazebo>

  <!-- Lidar 센서 추가 - 센서의 최상위 링크(dummy_base_link)를 로봇의 base_link에 부착 -->
  
  <joint name="lida_base_link_joint" type="fixed">
    <parent link="base_link"/>
    <child link="lidar_base_link"/>
    <origin xyz="0.5125 0 0.05" rpy="0 0 0"/>
  </joint>

  <!-- 라이다 베이스 -->
  <link name="lidar_base_link">
    <inertial>
      <mass value="0.05"/>
      <origin xyz="0 0 0.03585"/>
      <inertia ixx="0.000908059425" ixy="0" ixz="0" iyy="0.000908059425" iyz="0" izz="0.0011049624"/>
    </inertial>
    <visual>
      <geometry>
        <cylinder length="0.0717" radius="0.0516"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0.03585"/>
      <geometry>
        <cylinder length="0.0717" radius="0.0516"/>
      </geometry>
    </collision>
  </link>

  <joint name="lidar_scan_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0 0 0.0377"/>
    <parent link="lidar_base_link"/>
    <child link="lidar_scan_link"/>
  </joint>

  <!-- <joint name="lidar_scan_link_joint" type="fixed">
    <parent link="base_link"/>
    <child link="lidar_scan_link"/>
    <origin xyz="0.5125 0 0.05" rpy="0 0 0"/>
  </joint> -->

  <link name="lidar_scan_link">
    <inertial>
      <mass value="0.01"/>
      <origin xyz="0 0 0"/>
      <inertia ixx="1e-7" ixy="0" ixz="0" iyy="1e-7" iyz="0" izz="1e-7"/>
    </inertial>
    <visual>
      <origin xyz="0 0 -0.0377"/>
      <geometry>
        <cylinder length="0.0717" radius="0.0516"/>
      </geometry>
    </visual>
  </link>

  <!-- Gazebo requires the velodyne_gazebo_plugins package -->
  <gazebo reference="lidar_scan_link">
    <sensor name="lidar" type="ray">
      <pose>0 0 0 0 0 0</pose>
      <visualize>false</visualize>
      <update_rate>10</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>440</samples>
            <resolution>1</resolution>
            <min_angle>-3.141592653589793</min_angle>
            <max_angle>3.141592653589793</max_angle>
          </horizontal>
          <vertical>
            <samples>16</samples>
            <resolution>1</resolution>
            <min_angle>-0.2617993877991494</min_angle>
            <max_angle>
                  0.2617993877991494</max_angle>
          </vertical>
        </scan>
        <range>
          <min>0.3</min>
          <max>131.0</max>
          <resolution>0.001</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.0</stddev>
        </noise>
      </ray>

      <plugin filename="libgazebo_ros_velodyne_laser.so" name="gazebo_ros_laser_controller">
        <topicName>/points_raw</topicName>
        <frameName>lidar_scan_link</frameName>
        <min_range>0.9</min_range>
        <max_range>130.0</max_range>
        <gaussianNoise>0.008</gaussianNoise>
      </plugin>
    </sensor>
  </gazebo>

  <!-- Gazebo Plugin for Differential Drive (Odometry) -->
  <gazebo>
    <plugin name="diff_drive" filename="libgazebo_ros_diff_drive.so">
      <ros>
        <namespace>/demo</namespace>
      </ros>
      <!-- Wheels configuration -->
      <left_joint>drivewhl_l_joint</left_joint>
      <right_joint>drivewhl_r_joint</right_joint>
      <!-- Kinematics parameters -->
      <wheel_separation>0.4</wheel_separation>
      <wheel_diameter>0.2</wheel_diameter>
      <!-- Limits -->
      <max_wheel_torque>20</max_wheel_torque>
      <max_wheel_acceleration>1.0</max_wheel_acceleration>
      <!-- Output settings -->
      <publish_odom>false</publish_odom>
      <publish_odom_tf>false</publish_odom_tf>
      <publish_wheel_tf>true</publish_wheel_tf>
      <odometry_frame>odom</odometry_frame>
      <robot_base_frame>base_link</robot_base_frame>
    </plugin>
  </gazebo>

</robot>
